import telebot
from telebot import types
from Configuration import bot
from MessengeCheckers import checkerForMessageWithIP,checkerForMessageWithPhone,checkerForMessageWithDomain
from FindOnRequest import fileSecurityReport

user_states = {}

def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttonInformation = types.InlineKeyboardButton("üìù –û –±–æ—Ç–µ", callback_data="about")
    buttonServices = types.InlineKeyboardButton("üëæ –£—Å–ª—É–≥–∏", callback_data="services")
    buttonContacts = types.InlineKeyboardButton("üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    markup.add(buttonContacts, buttonServices, buttonInformation)

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ö–∞–∫–µ—Ä üòé\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=markup
    )
def getDataAbout(call, markup):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
             "üåê –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± IP-–∞–¥—Ä–µ—Å–∞—Ö, –¥–æ–º–µ–Ω–∞—Ö, –Ω–æ–º–µ—Ä–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤!\n"
             "üëÄ –ö–æ –≤—Å–µ–º—É —ç—Ç–æ–º—É, —è –∏–º–µ—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—é–±–æ–π —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ —Ä–æ–¥–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–æ–≤, "
             "–Ω–∞–π—Ç–∏ —É—è–∑–≤–∏–º—ã–µ –ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
             "‚ùóÔ∏è –•–æ—á—É –ø–æ–¥–º–µ—Ç–∏—Ç—å, —á—Ç–æ —è —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –æ–±—É—á–∞—é—â–∏—Ö —Ü–µ–ª—è—Ö, –∏ –Ω–µ –Ω–µ—Å—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        reply_markup=markup)

def getDataContact(call, markup):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üåê –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –®–∞—Ä–∞–ø–æ–≤—ã–º –î–º–∏—Ç—Ä–∏–µ–º, —Å—Ç—É–¥–µ–Ω—Ç–æ–º –ö–∞–∑–∞–Ω—Å–∫–æ–≥–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞\n"
             "‚úâÔ∏è –ú–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º - @uni_999\n"
             "üìü –ú–æ–π Discord - unitou\n"
             "üõ† –ú–æ–π GitHub - https://github.com/uni-999\n"
             "‚ùóÔ∏è –•–æ—á—É –ø–æ–¥–º–µ—Ç–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –æ–±—É—á–∞—é—â–∏—Ö —Ü–µ–ª—è—Ö.–Ø –Ω–µ—Å—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –±–æ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
        reply_markup=markup)


def handle_callback(call):
    if call.data == "about":
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttonBack = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        markup.add(buttonBack)
        getDataAbout(call, markup)

    elif call.data == "contacts":
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttonBack = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        markup.add(buttonBack)
        getDataContact(call, markup)

    elif call.data == "services":
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttonDomain = types.InlineKeyboardButton("üíª –ü–æ–∏—Å–∫ –ø–æ –¥–æ–º–µ–Ω—É", callback_data="domain_searching")
        buttonIp = types.InlineKeyboardButton("üåê –ü–æ–∏—Å–∫ –ø–æ IP-–∞–¥—Ä–µ—Å—É", callback_data="ip_searching")
        buttonPhone = types.InlineKeyboardButton("üì± –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞",callback_data="phone_searching")
        buttonFileAnalyzis = types.InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã", callback_data="file_analyze_searching")
        buttonBack = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")

        markup.add(buttonDomain, buttonIp, buttonPhone, buttonFileAnalyzis,buttonBack)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
            reply_markup=markup
        )
    elif call.data == "back_to_main":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        start(call.message)
    elif call.data == "domain_searching":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –ª–∏–±–æ –µ–≥–æ —Å—Å—ã–ª–∫—É:")
        user_states[call.from_user.id] = "waiting_for_domain_request"
    elif call.data == "ip_searching":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å:")
        user_states[call.from_user.id] = "waiting_for_ip_request"
    elif call.data == "phone_searching":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        user_states[call.from_user.id] = "waiting_for_phone_request"
    elif call.data == "file_analyze_searching":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        user_states[call.from_user.id] = "waiting_for_file_analyze"

def triggerDomainSearching(message):
    finalMessage = checkerForMessageWithDomain(message.text.strip())
    if finalMessage != None:
        bot.reply_to(message, finalMessage)
        start(message)
    else:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–≤–µ–¥—ë–Ω–æ–º—É –¥–æ–º–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        start(message)

def triggerIPSearching(message):
    finalMessage = checkerForMessageWithIP(message.text.strip())
    if finalMessage != None:
        bot.reply_to(message, finalMessage)
        start(message)
    else:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–≤–µ–¥—ë–Ω–æ–º—É IP. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        start(message)

def triggerPhoneSearching(message):
    finalMessage = checkerForMessageWithPhone(message.text.strip())
    if finalMessage != None:
        bot.reply_to(message, finalMessage)
        start(message)
    else:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–≤–µ–¥—ë–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        start(message)

def triggerFilesAnalyze(message):
    fileSecurityReport(message)
    start(message)
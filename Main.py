import telebot
from Configuration import bot, vitusTotalAPI, apiUrl
import requests
import json
import re
import hashlib
import time
from MessengeCheckers import checkerMessengesWithText


@bot.message_handler(commands=['start', 'help'])
def sendWelcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ OSINT –∑–∞–¥–∞—á!")


@bot.message_handler(content_types='text')
def checkTextMessenge(message):
    bot.reply_to(message, checkerMessengesWithText(message.text))


@bot.message_handler(content_types=['document', 'photo', 'audio', 'video'])
def checkFileMessenge(message):
    file_info = bot.get_file(message.json.get('document', {}).get('file_id'))
    downloadedFile = bot.download_file(file_info.file_path)
    src = 'files/download/' + message.json.get('document', {}).get('file_name')
    with open(src, 'wb') as new_file:
        new_file.write(downloadedFile)
        new_file.close()
    with open(src, "rb") as new_file:
        headers = {
            'x-apikey': vitusTotalAPI
        }
        files = {'file': (src, new_file)}
        response = requests.post(apiUrl, headers=headers, files=files)
        if response.status_code == 200:
            print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:")
            linkOfAnalysis = response.json().get('data', {}).get('links').get('self')
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {response.status_code}")
            print(response.text)
        while True:
            response = requests.get(linkOfAnalysis, headers=headers)
            if response.status_code == 200:
                analysisData = response.json()
                status = analysisData['data']['attributes']['status']
                print(f"–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞: {status}")

                if status == 'completed':
                    print("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    break
                elif status in ['queued', 'in-progress']:
                    print("–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ...")
                    time.sleep(20)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 20 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                else:
                    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞: {status}")
                    break
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
                print(response.text)
                break
        if status == 'completed':
            results = analysisData['data']['attributes']['results']
            stats = analysisData['data']['attributes']['stats']

        finalMessage = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:\n"
        finalMessage += f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {stats.get('harmless', 0)}\n"
        finalMessage += f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {stats.get('suspicious', 0)}\n"
        finalMessage += f"‚ùå –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö: {stats.get('malicious', 0)}\n"
        finalMessage += f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö: {stats.get('undetected', 0)}\n\n"

        # –î–µ—Ç–∞–ª–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞
        finalMessage += "üîç –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:\n"
        for engine, result in results.items():
            category = result.get('category', 'unknown')
            detection = result.get('result', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            engine_name = result.get('engine_name', engine)

            finalMessage += f"- {engine_name}: "
            if category == 'malicious':
                finalMessage += f"‚ö†Ô∏è –í–†–ï–î–û–ù–û–°–ù–´–ô ({detection})\n"
            elif category == 'suspicious':
                finalMessage += f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô ({detection})\n"
            elif category == 'harmless':
                finalMessage += f"‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô\n"
            else:
                finalMessage += f"‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô\n"

        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.reply_to(message, finalMessage)

        # files = dict(file=(src, new_file))
        # response = requests.post(apiUrl, files=files, params=vitusTotalAPI)
        # if response.status_code == 200:
        #     result = response.json()
        #     print(json.dumps(result, sort_keys=False, indent=4))
        # print(response.status_code)
    # try:
    #     print(client.get_object("/files/" + get_file_hash(src)))
    # except:
    #     with open(src, "rb") as f:
    #         analysis = await client.scan_file(f, wait_for_completion=True)
    #         f.close()
    #     print(analysis)


def get_file_hash(file_path):
    hashType = hashlib.sha256()
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(65536), b''):
            hashType.update(chunk)
    return hashType.hexdigest()


bot.infinity_polling()
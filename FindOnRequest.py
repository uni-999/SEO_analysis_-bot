import requests
import telebot
import whois as pywhois
from Configuration import bot, vitusTotalAPI, apiUrl
import time
from InputDict import dictForSearch
from scapy.all import *

def formatDates(dateList):
    if not isinstance (dateList, list):
        dateList = [dateList] if dateList is not None else ['N/A']
    elif not dateList:
        dateList = ['N/A']
    return [str(date) for date in dateList]

def findDomain(message):
    w = pywhois.whois(message)
    finalMessange = ""
    for key, value in dictForSearch.items():
        if isinstance(value, list):
            finalMessange += processList(key, value, w)
        else:
            finalMessange += processString(key, value, w)
    return finalMessange

def processList(key, value, w) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞  „Éæ(Ôºæ‚àáÔºæ)"""
    for i in value:
        SourceData = w.get(i, 'N/A')
        if SourceData == 'N/A':
            dataInIndex = SourceData
            continue
        if isinstance(SourceData, list):
            dataInIndex = ', '.join(formatDates(SourceData))
            break
        else:
            dataInIndex = SourceData
            break

    return f"{key}: {dataInIndex} \n"

def processString(key, value, w) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É  „Éæ(Ôºæ‚àáÔºæ)"""

    SourceData = w.get(value, 'N/A')
    if isinstance(SourceData, list):
        dataInIndex = ', '.join(formatDates(SourceData))
        return f"{key}: {dataInIndex}\n"
    else:
        dataInIndex = SourceData
        return f"{key}: {dataInIndex}\n"

def findIp(ipAddress, fua):
    result = str()
    try:
        headers = {
            'User-Agent': fua
        }
        data = requests.get(f'https://ipinfo.io/{ipAddress}/json', headers=headers).json()
    except Exception as ex:
        return ex
    message = (
        f"IP-–∞–¥—Ä–µ—Å: {data.get('ip', 'N/A')}\n"
        f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {str(findOpenPortsByIP(ipAddress))}\n"
        f"–•–æ—Å—Ç–Ω–µ–π–º: {data.get('hostname', 'N/A')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city', 'N/A')}\n"
        f"–†–µ–≥–∏–æ–Ω: {data.get('region', 'N/A')}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data.get('country', 'N/A')}\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data.get('loc', 'N/A')}\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data.get('org', 'N/A')}\n"
        f"–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {data.get('postal', 'N/A')}\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 'N/A')}\n"
        f"Anycast: {'–î–∞' if data.get('anycast', False) else '–ù–µ—Ç'}"
    )
    return message

def findPhoneNumber(phonenumber, fua):
    try:
        url = f"https://htmlweb.ru/geo/api.php?json&telcod={phonenumber}"
        headers = {
            'User-Agent': fua
        }
        data = requests.get(url, headers=headers).json()
    except Exception as ex:
        return ex
    print(data)
    message = (
        f"–°—Ç—Ä–∞–Ω–∞: {data.get('country', {}).get('name', 'N/A')}\n"
        f"–†–µ–≥–∏–æ–Ω: {data.get('region', {}).get('name', 'N/A')}\n"
        f"–†–∞–π–æ–Ω: {data.get('region', {}).get('okrug', 'N/A')}\n"
        f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {data.get('0', {}).get('oper', 'N/A')}\n"
        f"–ß–∞—Å—Ç—å —Å–≤–µ—Ç–∞: {data.get('country', {}).get('location', 'N/A')}"
    )
    return message

def findOpenPortsByIP(ipAddress):
    openPorts = []
    packets = [IP(dst=ipAddress) / TCP(dport=port, flags="S") for port in range(1, 1025)]
    responses, _ = sr(packets, timeout=2, verbose=0)
    for sent, received in responses:
        if received.haslayer(TCP) and received[TCP].flags == 0x12:  # SYN-ACK
            openPorts.append(sent[TCP].dport)
            sr1(IP(dst=ipAddress) / TCP(dport=sent[TCP].dport, flags="R"), timeout=0.1, verbose=0)
    result = ', '.join(map(str, openPorts))
    return result

def fileSecurityReport(message):
    file_info = bot.get_file(message.json.get('document', {}).get('file_id'))
    downloadedFile = bot.download_file(file_info.file_path)
    src = 'files/download/' + message.json.get('document', {}).get('file_name')
    with open(src, 'wb') as new_file:
        new_file.write(downloadedFile)
        new_file.close()
    with open(src, "rb") as new_file:
        headers = {
            'x-apikey': vitusTotalAPI
        }
        files = {'file': (src, new_file)}
        response = requests.post(apiUrl, headers=headers, files=files)
        if response.status_code == 200:
            print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:")
            linkOfAnalysis = response.json().get('data', {}).get('links').get('self')
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {response.status_code}")
            print(response.text)
        while True:
            response = requests.get(linkOfAnalysis, headers=headers)
            if response.status_code == 200:
                analysisData = response.json()
                status = analysisData['data']['attributes']['status']
                print(f"–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞: {status}")

                if status == 'completed':
                    print("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    break
                elif status in ['queued', 'in-progress']:
                    print("–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ...")
                    time.sleep(20)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 20 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                else:
                    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞: {status}")
                    break
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
                print(response.text)
                break
        if status == 'completed':
            results = analysisData['data']['attributes']['results']
            stats = analysisData['data']['attributes']['stats']

        finalMessage = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:\n"
        finalMessage += f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {stats.get('harmless', 0)}\n"
        finalMessage += f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {stats.get('suspicious', 0)}\n"
        finalMessage += f"‚ùå –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö: {stats.get('malicious', 0)}\n"
        finalMessage += f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö: {stats.get('undetected', 0)}\n\n"

        # –î–µ—Ç–∞–ª–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞
        finalMessage += "üîç –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:\n"
        for engine, result in results.items():
            category = result.get('category', 'unknown')
            detection = result.get('result', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            engine_name = result.get('engine_name', engine)

            finalMessage += f"- {engine_name}: "
            if category == 'malicious':
                finalMessage += f"‚ö†Ô∏è –í–†–ï–î–û–ù–û–°–ù–´–ô ({detection})\n"
            elif category == 'suspicious':
                finalMessage += f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô ({detection})\n"
            elif category == 'harmless':
                finalMessage += f"‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô\n"
            else:
                finalMessage += f"‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô\n"
        bot.reply_to(message, finalMessage)